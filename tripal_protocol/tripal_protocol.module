<?php
/**
 * @file
 * Basic functionality for the tripal analysis expression module.
 */

/**
 * @defgroup tripal_protocol Tripal Analysis Expression
 * @ingroup tripal_modules *** is this right?
 * @{
 * Integrates the several tables from the Chado Mage module with
 * the Analysis module.
 * @}
 */

require_once "theme/tripal_protocol.theme.inc";
require_once "api/tripal_arraydesign.api.inc";
require_once "api/tripal_protocol.api.inc";
require_once "includes/tripal_protocol.fields.inc";
require_once "includes/tripal_protocol_quantity_units_form.inc";

/**
 * Implements hook_help().
 *
 * Display help and module information.
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_help($path, $arg) {

}

/**
 * Implements hook_permission().
 *
 *  Set the permissions types used by the tripal analysis expression module.
 *  Permissions include: access, create, delete, edit, and administer.
 *  Permissions are set for the following content types provided by this module:
 *  Analysis: Expression, Arraydesign, Biomaterial, and Protocol.
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_permission() {
  return [
    'access chado_arraydesign content' => [
      'title' => t('View Arraydesigns'),
      'description' => t('Allow users to view arraydesign pages.'),
    ],
    'create chado_arraydesign content' => [
      'title' => t('Create Arraydesigns'),
      'description' => t('Allow users to create new arraydesign pages.'),
    ],
    'delete chado_arraydesign content' => [
      'title' => t('Delete Arraydesigns'),
      'description' => t('Allow users to delete arraydesign pages.'),
    ],
    'edit chado_arraydesign content' => [
      'title' => t('Edit Arraydesigns'),
      'description' => t('Allow users to edit arraydesign pages.'),
    ],
    'administer tripal arraydesign' => [
      'title' => t('Administer Arraydesigns'),
      'description' => t('Allow users to administer all arraydesigns.'),
    ],
    'access chado_protocol content' => [
      'title' => t('View Protocols'),
      'description' => t('Allow users to view protocol pages.'),
    ],
    'create chado_protocol content' => [
      'title' => t('Create Protocols'),
      'description' => t('Allow users to create new protocol pages.'),
    ],
    'delete chado_protocol content' => [
      'title' => t('Delete Protocols'),
      'description' => t('Allow users to delete protocol pages.'),
    ],
    'edit chado_protocol content' => [
      'title' => t('Edit Protocols'),
      'description' => t('Allow users to edit protocol pages.'),
    ],
    'administer tripal protocol' => [
      'title' => t('Administer Protocols'),
      'description' => t('Allow users to administer all protocols.'),
    ],
  ];
}

/**
 * Implements hook_menu().
 *
 *  This function adds menus for the four content types created by the
 *  tripal analyis expression module as well a menu the configuration of
 *  expression data on feature pages. An admin list, sync, delete, TOC,
 *  settings, and help page is created for the following content types:
 *  analysis: expression, arraydesign, biomaterial, and protocol.
 *
 * @ingroup tripal_expression
 */
function tripal_protocol_menu() {
  $items = [];



  // Admin configuration group.
  $items['admin/tripal/extension/tripal_protocol'] = [
    'title' => 'Protocol',
    'description' => 'Administrative pages for the Tripal Protocol module.',
    'access arguments' => ['administer tripal protocol'],
  ];

  //Pages for editing units associated with a quantification
  $items['admin/tripal/extension/tripal_protocol/quantification_units'] = [
    'title' => 'Quantification Units',
    'description' => 'Set or alter units associated with quantifications.',
    'access arguments' => ['administer tripal protocol'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_protocol_quantity_units_form'],
  ];
  $items['admin/tripal/extension/tripal_protocol/quantification_units/edit/%'] = [
    'title' => 'Edit Quantification Units',
    'description' => 'Edit a given quantification',
    'access arguments' => ['administer tripal protocol'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_protocol_quantity_units_edit_form',6],
  ];



  return $items;
}

/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is located.
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_views_api() {
  return [
    'api' => 3.0,
  ];
}

/**
 * Implements hook_theme().
 *
 * This function informs drupal of the themes included in this modules.
 *  An base, help, and teaser template are included for the four content
 *  types defined by this module: analysis: expression, arraydesign,
 *  biomaterial, and protocol. Additional templates include a protocol
 *  template for the analysis: expression content type and a variable
 *  expression template for the feature content type.
 *
 * ***documentation of parameters here????
 *
 * @ingroup tripal_protocol
 */
function tripal_protocol_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');

  $items = [
    'node__chado_tripal_protocol' => [
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ],
    'tripal_protocol_help' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_protocol_help',
      'path' => "$path/theme/templates",
    ],
    'tripal_protocol_base' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_protocol_base',
      'path' => "$path/theme/templates",
    ],
    'tripal_protocol_protocols' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_protocol_protocols',
      'path' => "$path/theme/templates",
    ],
    'tripal_protocol_teaser' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_protocol_teaser',
      'path' => "$path/theme/templates",
    ],
    'node__chado_arraydesign' => [
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ],
    'tripal_arraydesign_base' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_arraydesign_base',
      'path' => "$path/theme/templates",
    ],
    'tripal_arraydesign_properties' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_arraydesign_properties',
      'path' => "$path/theme/templates",
    ],
    'tripal_arraydesign_teaser' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_arraydesign_teaser',
      'path' => "$path/theme/templates",
    ],
    'tripal_arraydesign_help' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_arraydesign_help',
      'path' => "$path/theme/templates",
    ],
    'node__chado_protocol' => [
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ],
    'tripal_protocol_base' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_protocol_base',
      'path' => "$path/theme/templates",
    ],
    'tripal_protocol_teaser' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_protocol_teaser',
      'path' => "$path/theme/templates",
    ],
    'tripal_protocol_help' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_protocol_help',
      'path' => "$path/theme/templates",
    ],

  ];
  return $items;
}

