<?php
/**
 * @file
 * Basic functionality for the tripal analysis expression module.
 */

/**
 * @defgroup tripal_analysis_expression Tripal Analysis Expression
 * @ingroup tripal_modules *** is this right?
 */

require_once "includes/tripal_analysis_expression.chado_node.inc";
require_once "includes/tripal_analysis_expression.admin.inc";
require_once "includes/tripal_analysis_expression_config.admin.inc";
require_once "includes/tripal_analysis_expression.delete.inc";
require_once "includes/tripal_analysis_expression.fields.inc";
require_once "theme/tripal_analysis_expression.theme.inc";
require_once drupal_get_path('module', 'tripal_analysis_expression') . '/includes/feature_heatmap_form.inc';

/**
 * Implements hook_help().
 *
 * Display help and module information.
 *
 * @ingroup tripal_analysis_expression
 */
function tripal_analysis_expression_help($path, $arg) {
  switch ($path) {

    // Both of the following cases should display the below HTML.
    case 'admin/tripal/extension/tripal_analysis_expression/help' :
    case 'admin/help#tripal_analysis_expression' : {
      $ret_val = '<h3>' . t('Module Content Types') . '</h3>';
      $ret_val .= '<p>' . t('The expression module allows the user to load and display expression information.') . '</p>';
      $ret_val .= "<b>" . t("Analysis: Expression") . "</b> - " . t("This analysis: expression content type") . " ";
      $ret_val .= t("provides the ability") . " ";
      $ret_val .= t("to describe either microarray expression data or next generation sequencing") . " ";
      $ret_val .= t("expression data (such as data obtained from RNASeq). The analysis: expression content") . " ";
      $ret_val .= t("type also provides a") . " ";
      $ret_val .= t("form to load expression data associated with the analysis.") . "<br>";
      $ret_val .= l(t("Analysis: Expression Administrative Pages"), "admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression");
      $ret_val .= "<br>" . l(t("Create Analysis: Expression"), "node/add/chado-analysis-expression");
      $ret_val .= "<br>" . l(t("Analysis: Expression Help"), "admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/help");
      $ret_val .= "<br><br><b>" . t("Biomaterial") . "</b> - " . t("The biomaterial content type") . " ";
      $ret_val .= t("represents the Chado biomaterial table. The Chado biomaterial table is a member") . " ";
      $ret_val .= t("of the Chado MAGE module. The biomaterial content type is similar to the") . " ";
      $ret_val .= l(t("BioSample"), "http://www.ncbi.nlm.nih.gov/books/NBK169436/") . " ";
      $ret_val .= t("content type provided by NCBI. See the biomaterial description at the") . " ";
      $ret_val .= l(t("GMOD wiki."), "http://gmod.org/wiki/Chado_Mage_Module#Table:_biomaterial") . "<br>";
      $ret_val .= l(t("Biomaterial Administrative Pages"), "admin/tripal/extension/tripal_analysis_expression/content_types/biomaterial");
      $ret_val .= "<br>" . l(t("Create Biomaterial"), "node/add/chado-biomaterial");
      $ret_val .= "<br>" . l(t("Biomaterial Help"), "admin/tripal/extension/tripal_analysis_expression/content_types/biomaterial/help");
      $ret_val .= "<br><br><b>" . t("Array Design") . "</b> - " . t("The array design content type") . " ";
      $ret_val .= t("represents the Chado arraydesign table. This table is only used when describing") . " ";
      $ret_val .= t("the experimental design of data collected from a microarray expression experiment.") . " ";
      $ret_val .= t("See the arraydesign description at the");
      $ret_val .= l(t(" GMOD wiki."), "http://gmod.org/wiki/Chado_Mage_Module#Table:_arraydesign") . "<br>";
      $ret_val .= l(t("Array Design Administrative Pages"), "admin/tripal/extension/tripal_analysis_expression/content_types/arraydesign");
      $ret_val .= "<br>" . l(t("Create Array Design"), "node/add/chado-arraydesign");
      $ret_val .= "<br>" . l(t("Array Design Help"), "admin/tripal/extension/tripal_analysis_expression/content_types/arraydesign/help");
      $ret_val .= "<br><br><b>" . t("Protocol") . "</b> -" . t(" The protocol content type represents") . " ";
      $ret_val .= t("the Chado protocol table. This table is used to describe the protocol, software,") . " ";
      $ret_val .= t("and hardware used in different steps of the experiment. See the protocol description at the") . " ";
      $ret_val .= l(t("GMOD wiki."), "http://gmod.org/wiki/Chado_Tables#Table:_protocol") . "<br>";
      $ret_val .= l(t("Protocol Administrative Pages"), "admin/tripal/extension/tripal_analysis_expression/content_types/protocol");
      $ret_val .= "<br>" . l(t("Create Protocol"), "node/add/chado-protocol") . "<br>";
      $ret_val .= l(t("Protocol Help"), "admin/tripal/extension/tripal_analysis_expression/content_types/protocol/help");
      $ret_val .= '<h3>' . t('Module Data Loaders') . '</h3>';
      $ret_val .= "<p>" . t("This module provides several data loaders.") . '</p>';
      $ret_val .= "<b>" . l(t("Biomaterial Loader"), "admin/tripal/extension/tripal_analysis_expression/biomaterial_loader");
      $ret_val .= "</b> - " . t("The biomaterial loader has the ability to load ");
      $ret_val .= l(t("BioSample"), "http://www.ncbi.nlm.nih.gov/biosample/") . t(" data downloaded from NCBI in an xml format. ");
      $ret_val .= t("The biomaterial loader can also load data from a CSV or TSV file formatted as a ");
      $ret_val .= l(t("BioSample submission template"), "https://submit.ncbi.nlm.nih.gov/biosample/template/") . t(".");
      $ret_val .= "<br><br><b>" . l(t("Expression Loader"), "node/add/chado-analysis-expression") . "</b> - ";
      $ret_val .= t("The expression loader is associated with the Analysis: Expression ");
      $ret_val .= t("content type. To load expression data, create an Analysis: Expression and configure the expression loading job ");
      $ret_val .= t("in the Analysis: Expression form. Expression data may be loaded from two types of tab separted formats, ");
      $ret_val .= t("a matrix file or a column file.") . "<br><br>";

      return $ret_val;
      break;
    }
  }
}

/**
 * Implements hook_permission().
 *
 *  Set the permissions types used by the tripal analysis expression module.
 *  Permissions include: access, create, delete, edit, and administer.
 *  Permissions are set for the following content types provided by this module:
 *  Analysis: Expression, Arraydesign, Biomaterial, and Protocol.
 *
 * @ingroup tripal_analysis_expression
 */
function tripal_analysis_expression_permission() {
  return [
    'administer tripal analysis expression' => [
      'title' => t('Administer Analysis: Expressions'),
      'description' => t('Allow users to administer all analysis: expressions.'),
    ],
    'access chado_arraydesign content' => [
      'title' => t('View Arraydesigns'),
      'description' => t('Allow users to view arraydesign pages.'),
    ],
    'create chado_arraydesign content' => [
      'title' => t('Create Arraydesigns'),
      'description' => t('Allow users to create new arraydesign pages.'),
    ],
  ];
}

/**
 * Implements hook_menu().
 *
 *  This function adds menus for the four content types created by the
 *  tripal analyis expression module as well a menu the configuration of
 *  expression data on feature pages. An admin list, sync, delete, TOC,
 *  settings, and help page is created for the following content types:
 *  analysis: expression, arraydesign, biomaterial, and protocol.
 *
 * @ingroup tripal_expression
 */
function tripal_analysis_expression_menu() {
  $items = [];

  // Admin configuration group.
  $items['admin/tripal/extension/tripal_analysis_expression'] = [
    'title' => 'Expression Analysis',
    'description' => 'Administrative pages for the Tripal Expression Analysis module.',
    'access arguments' => ['administer tripal analysis expression'],
  ];

  // Content type configuration group.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types'] = [
    'title' => 'Tripal Expression Analysis Content Types',
    'description' => 'Administer content types provided by the Tripal Expression Analysis module.',
    'access arguments' => ['administer tripal analysis expression'],
  ];

  // Module help pages.
  $items['admin/tripal/extension/tripal_analysis_expression/help'] = [
    'title' => 'Tripal Expression Analysis Help',
    'description' => 'A description of expression module content types and loaders.',
    'access arguments' => ['administer tripal analysis expression'],
    'weight' => 10,
  ];

  // Heatmap settings
  $items['admin/tripal/extension/tripal_analysis_expression/heatmap_settings'] = [
    'title' => 'Expression Visualization Settings',
    'description' => 'Administrative pages for the Tripal Expression Analysis module.',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_analysis_expression_heatmap_settings_form']
  ];

  // Expression display on feature pages.
  $items['admin/tripal/extension/tripal_analysis_expression/manage'] = [
    'title' => 'Tripal Expression Analysis Settings',
    'description' => 'Manage the display of expression information.',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_analysis_expression_config_admin'],
  ];

  // Admin configuration - analysis_expression admin list.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression'] = [
    'title' => 'Analysis: Expression',
    'description' => 'An expression analysis from the chado database.',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'tripal_analysis_expression_admin_analysis_expression_view',
    'type' => MENU_NORMAL_ITEM,
  ];

  // Admin configuration - analysis_expression settings.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/configuration'] = [
    'title' => 'Settings',
    'description' => 'Manage Analysis: Expression settings and configurations.',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_analysis_expression_admin'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 5,
  ];

  // Admin configuration - analysis_expression TOC.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/chado_analysis_expression_toc'] = [
    'title' => 'TOC',
    'description' => 'Manage the table of contents for analysis_expression nodes.',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'drupal_get_form',
    'page arguments' => [
      'tripal_core_content_type_toc_form',
      'chado_analysis_expression',
    ],
    'file' => 'includes/tripal_core.toc.inc',
    'file path' => drupal_get_path('module', 'tripal_core'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 3,
  ];

  // Admin configuration - analysis_expression sync.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/sync'] = [
    'title' => 'Sync',
    'description' => 'Create pages on this site for analysis_expressions stored in Chado.',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'drupal_get_form',
    'page arguments' => [
      'chado_node_sync_form',
      'tripal_analysis_expression',
      'chado_analysis_expression',
    ],
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
  ];

  // Admin configuration - analysis_expression delete.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/delete'] = [
    'title' => "Delete",
    'description' => 'Delete multiple analysis_expressions from Chado',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['tripal_analysis_expression_delete_form'],
    'access arguments' => ['administer tripal protoocl'],
    'type' => MENU_LOCAL_TASK,
    'file path' => drupal_get_path('module', 'tripal_analysis_expression'),
    'file' => 'includes/tripal_analysis_expression.delete.inc',
    'weight' => 3,
  ];

  // Admin configuration - analysis_expression help.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/help'] = [
    'title' => 'Help',
    'description' => "A description of the Tripal Analysis: Expression content type including a short description of it's usage.",
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'theme',
    'page arguments' => ['tripal_analysis_expression_help'],
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  ];

  // Admin configuration - analysis_expression enable view.
  $items['admin/tripal/extension/tripal_analysis_expression/content_types/analysis_expression/views/analysis_expressions/enable'] = [
    'title' => 'Enable Analysis: Expression Administrative View',
    'access arguments' => ['administer tripal analysis expression'],
    'page callback' => 'tripal_enable_view',
    'page arguments' => [
      'tripal_analysis_expression_admin_analysis_expressions',
      'tripal_analysis_expression',
      'admin/tripal/extension/tripal_analysis_expression/analysis_expression',
    ],
  ];

  return $items;
}

/**
 * Implements hook_views_api().
 *
 * Essentially this hook tells drupal that there is views support for
 *  for this module which then includes tripal_db.views.inc where all the
 *  views integration code is located.
 *
 * @ingroup tripal_analysis_expression
 */
function tripal_analysis_expression_views_api() {
  return [
    'api' => 3.0,
  ];
}

/**
 * Implements hook_theme().
 *
 * This function informs drupal of the themes included in this modules.
 *  An base, help, and teaser template are included for the four content
 *  types defined by this module: analysis: expression, arraydesign,
 *  biomaterial, and protocol. Additional templates include a protocol
 *  template for the analysis: expression content type and a variable
 *  expression template for the feature content type.
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 * @see \theme() for paramaters instructions
 *
 * @ingroup tripal_analysis_expression
 *
 * @return array
 */
function tripal_analysis_expression_theme($existing, $type, $theme, $path) {
  $core_path = drupal_get_path('module', 'tripal_core');

  $items = [
    'node__chado_analysis_expression' => [
      'template' => 'node--chado-generic',
      'render element' => 'node',
      'base hook' => 'node',
      'path' => "$core_path/theme/templates",
    ],
    'tripal_analysis_expression_help' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_analysis_expression_help',
      'path' => "$path/theme/templates",
    ],
    'tripal_analysis_expression_base' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_analysis_expression_base',
      'path' => "$path/theme/templates",
    ],

    'tripal_analysis_expression_teaser' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_analysis_expression_teaser',
      'path' => "$path/theme/templates",
    ],
    'tripal_feature_expression' => [
      'variables' => ['node' => NULL],
      'template' => 'tripal_feature_expression',
      'path' => "$path/theme/templates",
    ],
  ];
  return $items;
}

/*
 * Implement hook_block_info()
 * Define two blocks one for input features
 * the other one for display heatmap
 */
function tripal_analysis_expression_block_info() {
  // Define two blocks: one for features input form
  // the other one for heatmap display
  $blocks = [];
  $blocks['input_features'] = [
    'info' => t('tripal_analysis_expression features form for heatmap'),
    'status' => 1,
    'region' => 'content',
    'weight' => 24,
    'cache' => DRUPAL_NO_CACHE,
  ];

  $blocks['heatmap_features'] = [
    'info' => t('tripal_analysis_expression heatmap display'),
    'status' => 1,
    'region' => 'content',
    'weight' => 25,
    'cache' => DRUPAL_NO_CACHE,
  ];

  return $blocks;
}

/*
 * Implement hook_block_view()
 */
function tripal_analysis_expression_block_view($delta = '') {
  $block = [];
  switch ($delta) {
    case 'input_features':
      $block['subject'] = t('Feature Expression');
      $block['content'] = drupal_get_form('feature_heatmap_form');
      drupal_add_js(['visual_expression_example' => variable_get('tripal_analysis_expression_heatmap_example')], ['type' => 'setting']);
      drupal_add_js(drupal_get_path('module', 'tripal_analysis_expression') . '/theme/js/example.js');
      break;
    case 'heatmap_features':
      $heatmap = generate_heatmap_values();
      if (!empty($heatmap['heatmap_data'])) {
        $block['subject'] = t('Feature Expression Heatmap');
        $block['content'] = '<div id="vis_expression"></div>';
        drupal_add_js(drupal_get_path('module', 'tripal_analysis_expression') . '/theme/js/plotly-latest.min.js');
        drupal_add_js(['tripal_analysis_expression' => ['heatmap_data' => $heatmap['heatmap_data']]], ['type' => 'setting']);
        drupal_add_js(['tripal_analysis_expression' => ['left_margin' => $heatmap['left_margin']]], ['type' => 'setting']);
        drupal_add_js(['tripal_analysis_expression' => ['bottom_margin' => $heatmap['bottom_margin']]], ['type' => 'setting']);
        drupal_add_js(drupal_get_path('module', 'tripal_analysis_expression') . '/theme/js/heatmap.js');
      }
      else {
        $block['subject'] = '';
        if (isset($_GET['heatmap_feature_uniquename']) && !empty($_GET['heatmap_feature_uniquename'])) {
          $block['content'] = t('<p style="color:red; font-weight: bold; margin-top: 20px">There is no expression data available for the features you entered.</p>');
        }
      }
      break;
  }

  return $block;
}

